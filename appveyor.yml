environment:
  matrix:
    - PYTHON_VERSION: "3.5"
      PYTHON_ARCH: "64"
      CONDA_PY: "35"
      CONDA_INSTALL_LOCN: "C:\\Miniconda35-x64"
    - PYTHON_VERSION: "3.5"
      PYTHON_ARCH: "64"
      CONDA_PY: "35"
      CONDA_INSTALL_LOCN: "C:\\Miniconda35-x64"
      PY_INSTALL: "lxml"
    - PYTHON_VERSION: "3.6"
      PYTHON_ARCH: "64"
      CONDA_PY: "36"
      CONDA_INSTALL_LOCN: "C:\\Miniconda36-x64"
    - PYTHON_VERSION: "3.6"
      PYTHON_ARCH: "64"
      CONDA_PY: "36"
      CONDA_INSTALL_LOCN: "C:\\Miniconda36-x64"
      PY_INSTALL: "lxml"
    - PYTHON_VERSION: "2.7"
      PYTHON_ARCH: "32"
      CONDA_PY: "27"
      CONDA_INSTALL_LOCN: "C:\\Miniconda"
    - PYTHON_VERSION: "2.7"
      PYTHON_ARCH: "32"
      CONDA_PY: "27"
      CONDA_INSTALL_LOCN: "C:\\Miniconda"
      PY_INSTALL: "lxml"
install:
    # Use the pre-installed Miniconda for the desired arch
    - cmd: call %CONDA_INSTALL_LOCN%\Scripts\activate.bat
    - cmd: conda.exe update -y -q conda
    - cmd: conda.exe config --add channels conda-forge
    - cmd: conda.exe install -y -q numpy pandas
    - cmd: call %CONDA_INSTALL_LOCN%\python.exe -m pip install --no-cache-dir --ignore-installed -r requirements_dev.txt
    - ps: if($env:PY_INSTALL) { & ($env:CONDA_INSTALL_LOCN + "\python.exe") -m pip install --disable-pip-version-check --ignore-installed --no-cache-dir $env:PY_INSTALL }

build: false

test_script:
  - pytest
